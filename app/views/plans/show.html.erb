<style type="text/css">
	body {
		font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
	}
	#plan {
		width: 865px;
		margin: 30px 500px 30px 30px;
		padding-right: 320px;
	}
	#plan h2 {
		margin-top: 1.5em;
		font-size: 1.3em;
		font-weight: normal;
		color: #bbb;
	}
	#plan .day:first-child h2 {
		margin-top: 0;
	}
	#plan .shifts {
		margin-top: 1em;
		border-style: solid;
		border-color: #aaa;
		border-width: 1px 0;
		background-image: url(/images/plan_scale.png);
		min-height: 38px;
	}
	#plan .shift {
		position: relative;
		min-height: 38px;
		/*cursor: move;*/
	}
	#plan .assignments > li {
		float: left;
		margin: 4px 0 0 4px;
	}
	#plan .assignment,
	#plan .requirement {
		float: left;
		display: block;
		height: 30px;
		width: 30px;
		text-indent: 30px;
		overflow: hidden;
		z-index: 999;
	}
	#plan h3 {
		float: right;
		margin: 1em 1em 0 0;
		font-size: 0.9em;
		font-style: italic;
		color: #666;
	}
	#plan .shifts .resize_handle {
		position: absolute;
		display: block;
		top: 0;
		height: 100%;
		width: 10px;
		cursor: col-resize;
	}
	#plan .shifts .resize_handle.left {
		left: 0;
		cursor: w-resize;
	}
	#plan .shifts .resize_handle.right {
		right: 0;
		cursor: e-resize;
	}
	#sidebar {
		position: fixed;
		top: 0;
		right: 0;
		height: 100%;
		padding: 1em;
		border-left: 1px solid #ccc;
		background-color: #fff;
	}
	#sidebar > * {
		margin-left: 20px;
		margin-bottom: 1em;
	}
	#sidebar h3:first-child {
		margin-top: 0;
	}
	#sidebar h3 {
		font-size: 1.15em;
		color: #bbb;
		margin-top: 1.5em;
	}
	#sidebar a {
		text-decoration: none;
		color: #666;
	}
	#sidebar form {
		width: 250px;
		display: none;
	}
	#sidebar input[type=search] {
		width: 87%;
	}
	#sidebar ul {
		width: 250px;
		overflow: auto; /* clearfix */
	}
	#sidebar li a {
		display: block;
		float: left;
		margin: 0 4px 4px 0;
		padding: 4px;
		line-height: 30px;
		font-size: 0.85em;
		background-color: #efefef;
	}
	#sidebar .employee {
		width: 70px;
	}
	#sidebar .workplace,
	#sidebar .qualification {
		width: 110px;
	}
	#sidebar li div {
		float: left;
		height: 30px;
		width: 30px;
		margin-right: 4px;
	}
	#plan .assignment,
	#plan .requirement,
	#sidebar .qualification div {
		height: 26px;
		border-style: solid;
		border-bottom-width: 4px;
		border-color: transparent;
		background-image: url(http://github.com/images/gravatars/gravatar-30.png);
	}
	#sidebar .ui-draggable-dragging {
		width: 30px !important;
		height: 30px;
		overflow: hidden;
	}
	#sidebar .ui-draggable-dragging a {
		background-position: left top;
	}
	
	/* IMAGES */

  <% @employees.each do |employee| -%>
	#plan .<%= dom_id(employee) %>,
	.<%= dom_id(employee) %> div {
		background-image: url(<%= employee.gravatar_url_for_css(:size => 30) %>);
	}
	<% end -%>

	/* COLORS */
	
	<% @workplaces.each do |workplace| -%>
	#plan .<%= dom_id(workplace) %>,
	.<%= dom_id(workplace) %> div {
		background-color: <%= workplace.color %>;
	}
	<% end -%>

	#plan .qualification_1,
	#sidebar .qualification_1 div {
		border-color: #ff5959;
	}
	#plan .qualification_2,
	#sidebar .qualification_2 div {
		border-color: #ffac59;
	}
	#plan .qualification_3,
	#sidebar .qualification_3 div {
		border-color: #ffff59;
	}
	#plan .qualification_4,
	#sidebar .qualification_4 div {
		border-color: #acff59;
	}
	#plan .qualification_5,
	#sidebar .qualification_5 div {
		border-color: #59ff59;
	}
	#plan .qualification_6,
	#sidebar .qualification_6 div {
		border-color: #59ffac;
	}
	#plan .qualification_7,
	#sidebar .qualification_7 div {
		border-color: #59ffff;
	}
	#plan .qualification_8,
	#sidebar .qualification_8 div {
		border-color: #59acff;
	}
</style>
<script type="text/javascript">
$(document).ready(function() {
  $('#workplaces a.workplace').prepend('<div></div>');
  $('#employees a.employee').prepend('<div></div>');
  $('#qualifications a.qualification').prepend('<div></div>');
});
</script>
<div id="plan" data-start="<%= @plan.start_in_minutes %>" data-duration="<%= @plan.duration_in_minutes %>">
  <% @plan.days.each do |day| -%>
	<div class="day">
		<h2><%= l(day, :format => :long) %></h2>
		<ul class="shifts">
		  <%= render :partial => 'shift', :collection => Array(@shifts_by_day[day]) %>
		</ul>
	</div>
	<% end -%>
</div>
<%= render :partial => 'sidebar', :locals => { :employees => @employees, :workplaces => @workplaces, :qualifications => @qualifications } %>

<script type="text/javascript">
	var Config = {
		slot_width: 18,
		slots_per_hour: 4,
		default_slot_count: 12,
		minutes_per_slot: function() {
			return parseInt(60 / Config.slots_per_hour);
		},
		pixels_per_hour: function() {
			return Config.slot_width * Config.slots_per_hour;
		},
		pixels_per_minute: function() {
			return Config.pixels_per_hour() / 60; 
		},
		pixels_to_minutes: function(pixels) {
			return pixels / Config.pixels_per_minute();
		},
		minutes_to_pixels: function(minutes) {
			return minutes * Config.pixels_per_minute();
		}
	}
	
	var Util = {
		id_from_href: function(href) {
			var matches = href.match(/(\d+)$/);
			if(matches) {
				return matches[0];
			} else {
				return false;
			}
		}
	}
	
	var Plan = {
		bind_events: function() {
			$("#employees a div").draggable({
				helper: 'clone'
			});
			$(".assignments > li > a").draggable({
				helper: 'clone'
			});
			$("#workplaces a div").draggable({
				helper: 'clone'
			});
			$("#qualifications a div").draggable({
				helper: 'clone'
			});
			$("body").droppable({
				// drop: Assignments.on_assignment_remove,
				drop: Plan.on_element_remove,
				// accept: ".assignment" //  .shifts>li
			});
			$(".assignments a").droppable({
				accept: "#employees a div",
				drop: Assignments.on_employee_drop
			});
			$(".shifts").droppable({
				accept: "#workplaces a div",
				tolerance: 'touch',
				greedy: true,
				drop: Shifts.on_workplace_drop,
				over: Shifts.on_workplace_over,
				out:  Shifts.on_workplace_out
			});
			$(".shift").droppable({
				accept: "#qualifications a div",
				tolerance: 'touch',
				greedy: true,
				drop: Shifts.on_qualification_drop,
				// over: Shifts.on_workplace_over,
				// out:  Shifts.on_workplace_out
			});
			$(".shift").draggable({
				containment: 'parent',
				axis: 'x',
				grid: [Config.slot_width, 38],
				stop: Shifts.on_drag_stop
			});
			$(".shift").each(function(){ 
				Shifts.add_resize_handles($(this)) 
			});
			$(".shifts .resize_handle").draggable({
				axis: 'x',
				grid: [Config.slot_width, 0],
				drag: Shifts.on_resize,
				stop: Shifts.on_drag_stop
			});
		},
		on_element_remove: function(event, ui) {
			switch(true) {
				case ui.draggable.hasClass('assignment'): 
					Assignments.remove_element(ui.draggable);
					break;
				case ui.draggable.hasClass('requirement'): 
					Requirements.remove_element(ui.draggable);
					break;
				case ui.draggable.hasClass('shift'): 
					Shifts.remove_element(ui.draggable);
					break;
			}
		}			
	}

	var Day = {
		start: function() {
			return $("#plan").attr("data-start");
		}
	}

	var Assignments = {
		assign_employee: function(requirement, employee) {
			var id = Util.id_from_href(employee.attr('href'));
			requirement.removeClass('requirement').addClass('assignment employee_' + id);
			requirement.attr('href', employee.attr('href'));
		},
		remove_element: function(element) {
			var id = Util.id_from_href(employee.attr('href'));
			element.removeClass('assignment employee_' + id).addClass('requirement');
			element.attr('href', '#');
		},
		on_employee_drop: function(event, ui) {
			var requirement = $(this);
			var employee = $(ui.draggable).closest('a');
			Assignments.assign_employee(requirement, employee);
			requirement.effect('bounce', {}, 100);
		}
	};
	
	var Requirements = {
		remove_element: function(element) {
			element.parent().remove();
			element.remove();
		}
	}

	var Shifts = {
		init: function() {
			$(".shift").each(function() {
				Shifts.update_dimension_from_data($(this));
			});
		},
		add_requirement: function(shift, qualification) {
			var id = Util.id_from_href(qualification.attr('href'));
			var requirement = $('<li><a href="#" class="requirement qualification_' + id + '"></a></li>');
			return requirement.appendTo($('.assignments', shift));
		},
		add_resize_handles: function(element) {
			if($('.resize_handle', element).length == 0) {
				element.append($('<span class="resize_handle left"></span><span class="resize_handle right"></span>'));
			}
		},
		update_dimension_from_data: function(element) {
			element.css({
				left:  Config.minutes_to_pixels(element.attr('data-start') - Day.start()),
				width: Config.minutes_to_pixels(element.attr('data-duration'))
			})
		},
		update_data_from_dimension: function(element) {
			var left = parseInt(element.css('left'));
			var width = parseInt(element.css('width'));
			element.attr({
				'data-start': Config.pixels_to_minutes(left),
				'data-duration': Config.pixels_to_minutes(width)
			})
			// console.log('data updated to start: ' + element.attr('data-start') + ', duration: ' + element.attr('data-duration'));
		},
		remove_element: function(element) {
			element.remove();
		},
		expand_workspace_drop_zone: function(element) {
			Shifts.fix_droppable_proportions(30);
			element.css('padding-bottom', '30px');
		},
		reset_workspace_drop_zone: function(element) {
			Shifts.fix_droppable_proportions(-30);
			element.css('padding-bottom', '0px');
		},
		fix_droppable_proportions: function(offset) {
			// jumping through hoops thanks to jquery.ui's stupidity
			var list = $.ui.ddmanager.droppables['default'];
			for (var i = 0; i < list.length; i++) {
				list[i].proportions.height += offset;
			}
		},
		on_drag_stop: function(event, ui) {
			var element = $(this);
			if(element.hasClass('resize_handle')) {
				element = $(element[0].parentNode);
			}
			Shifts.update_data_from_dimension(element);
		},
		on_resize: function(event, ui) {
			var shift = $(this).closest('li');
			var shifts = shift.closest('.shifts');
			var draggable = $(this).data('draggable'); // gotta set containment directly to the draggable

			if (!draggable.containment) {
				var left = shifts.position().left;
				var top = shift.position().top;
				var containment = [left, top, left + shifts.width(), top + shift.height()];
				draggable.containment = containment;
			}

			if($(this).hasClass('left')) {
				shift.css({ 
					"left":  parseInt(shift.css('left')) + ui.position.left,
					"width": parseInt(shift.css('width')) - ui.position.left
				})
				draggable.offset.parent.left = draggable.offset.parent.left + ui.position.left;
			} else {
				shift.css({ "width": ui.position.left + $(this).width() })
			}
		},				
		on_workplace_drop: function(event, ui) {
			var workplace = $(ui.draggable).closest('a')[0];
			var name = workplace.innerHTML.replace(/<\/?[^>]+>/gi, '');

			var slot = parseInt((ui.offset.left - this.offsetLeft - 1) / Config.slot_width);
			var left = slot * Config.slot_width;
			var width = Config.slot_width * Config.default_slot_count;
			if(left + width > this.offsetWidth) {
				width = this.offsetWidth - left - 1;
			}

			var shift = $('<li class="shift ' + workplace.className + '"><h3>' + name + '</h3><ul class="assignments"></ul></li>');
			shift.css({ left: left + 'px' })
			shift.animate({ width: width }, { complete: function() { Shifts.update_data_from_dimension($(this)); } });
			$(this).append(shift);
			
			Plan.bind_events();
			Shifts.reset_workspace_drop_zone($(this));
		},
		on_workplace_over: function(event, ui) {
			Shifts.expand_workspace_drop_zone($(this));
		},
		on_workplace_out: function(event, ui) {
			Shifts.reset_workspace_drop_zone($(this));
		},
		on_qualification_drop: function(event, ui) {
			var shift = $(this);
			var qualification = $(ui.draggable).closest('a');
			requirement = Shifts.add_requirement(shift, qualification);
			// requirement.effect('bounce', {}, 500);
		}
	}

	$(document).ready(function() {
		Shifts.init();
		Plan.bind_events();
	});
</script>